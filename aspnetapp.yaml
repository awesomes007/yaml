apiVersion: v1
kind: Pod
metadata:
  name: aspnetapp
  labels:
    app: aspnetapp
spec:
  containers:
  - image: "mcr.microsoft.com/dotnet/core/samples:aspnetapp"
    name: aspnetapp-image
    ports:
    - containerPort: 80
      protocol: TCP

---

apiVersion: v1
kind: Service
metadata:
  name: aspnetapp
spec:
  selector:
    app: aspnetapp
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80

---

# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: aspnetapp-public
#   annotations:
#     kubernetes.io/ingress.class: azure/application-gateway
#     appgw.ingress.kubernetes.io/use-private-ip: "false"
# spec:
#   rules:
#     - host: "dev.id.sso.solidstateops.com" 
#       http:
#         paths:
#         - path: /
#           pathType: Prefix
#           backend:
#             service:
#               name: aspnetapp
#               port: 
#                 number: 80

# ---

# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: aspnetapp-private
#   annotations:
#     kubernetes.io/ingress.class: azure/application-gateway
#     appgw.ingress.kubernetes.io/use-private-ip: "true"
# spec:
#   rules:
#     - host: "internal.dev.id.sso.solidstateops.com" 
#       http:
#         paths:
#         - path: /
#           pathType: Prefix
#           backend:
#             service:
#               name: aspnetapp
#               port: 
#                 number: 80

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aspnetapp-private
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
    appgw.ingress.kubernetes.io/use-private-ip: "true"
spec:
  rules:
  - http:
      paths:
      - host: internal.dev.id.sso.solidstateops.com
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aspnetapp
            port: 
              number: 80



#EXAMPLES

#A minimal Ingress resource example:
#https://kubernetes.io/docs/concepts/services-networking/ingress/

# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: minimal-ingress
#   annotations:
#     nginx.ingress.kubernetes.io/rewrite-target: /
# spec:
#   rules:
#   - http:
#       paths:
#       - path: /testpath
#         pathType: Prefix
#         backend:
#           service:
#             name: test
#             port:
#               number: 80


#To install AAD Pod Identity to your cluster:
#RBAC enabled AKS cluster
#https://azure.github.io/application-gateway-kubernetes-ingress/setup/install-existing/
#https://raw.githubusercontent.com/Azure/aad-pod-identity/v1.5.5/deploy/infra/deployment-rbac.yaml



# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: aad-pod-id-nmi-service-account
#   namespace: default
# ---
# apiVersion: apiextensions.k8s.io/v1beta1
# kind: CustomResourceDefinition
# metadata:
#   name: azureassignedidentities.aadpodidentity.k8s.io
# spec:
#   group: aadpodidentity.k8s.io
#   version: v1
#   names:
#     kind: AzureAssignedIdentity
#     plural: azureassignedidentities
#   scope: Namespaced
# ---
# apiVersion: apiextensions.k8s.io/v1beta1
# kind: CustomResourceDefinition
# metadata:
#   name: azureidentitybindings.aadpodidentity.k8s.io
# spec:
#   group: aadpodidentity.k8s.io
#   version: v1
#   names:
#     kind: AzureIdentityBinding
#     plural: azureidentitybindings
#   scope: Namespaced
# ---
# apiVersion: apiextensions.k8s.io/v1beta1
# kind: CustomResourceDefinition
# metadata:
#   name: azureidentities.aadpodidentity.k8s.io
# spec:
#   group: aadpodidentity.k8s.io
#   version: v1
#   names:
#     kind: AzureIdentity
#     singular: azureidentity
#     plural: azureidentities
#   scope: Namespaced
# ---
# apiVersion: apiextensions.k8s.io/v1beta1
# kind: CustomResourceDefinition
# metadata:
#   name: azurepodidentityexceptions.aadpodidentity.k8s.io
# spec:
#   group: aadpodidentity.k8s.io
#   version: v1
#   names:
#     kind: AzurePodIdentityException
#     singular: azurepodidentityexception
#     plural: azurepodidentityexceptions
#   scope: Namespaced
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: aad-pod-id-nmi-role
# rules:
# - apiGroups: ["apiextensions.k8s.io"]
#   resources: ["customresourcedefinitions"]
#   verbs: ["get", "list"]
# - apiGroups: [""]
#   resources: ["pods"]
#   verbs: ["get", "list", "watch"]
# - apiGroups: [""]
#   resources: ["secrets"]
#   verbs: ["get"]
# - apiGroups: ["aadpodidentity.k8s.io"]
#   resources: ["azureidentitybindings", "azureidentities", "azurepodidentityexceptions"]
#   verbs: ["get", "list", "watch"]
# - apiGroups: ["aadpodidentity.k8s.io"]
#   resources: ["azureassignedidentities"]
#   verbs: ["get", "list", "watch"]
# ---
# apiVersion: rbac.authorization.k8s.io/v1beta1
# kind: ClusterRoleBinding
# metadata:
#   name: aad-pod-id-nmi-binding
#   labels:
#     k8s-app: aad-pod-id-nmi-binding
# subjects:
# - kind: ServiceAccount
#   name: aad-pod-id-nmi-service-account
#   namespace: default
# roleRef:
#   kind: ClusterRole
#   name: aad-pod-id-nmi-role
#   apiGroup: rbac.authorization.k8s.io
# ---
# apiVersion: apps/v1
# kind: DaemonSet
# metadata:
#   labels:
#     kubernetes.io/cluster-service: "true"
#     component: nmi
#     tier: node
#     k8s-app: aad-pod-id
#   name: nmi
#   namespace: default
# spec:
#   updateStrategy:
#     type: RollingUpdate
#   selector:
#     matchLabels:
#       component: nmi
#       tier: node
#   template:
#     metadata:
#       labels:
#         component: nmi
#         tier: node
#     spec:
#       serviceAccountName: aad-pod-id-nmi-service-account
#       hostNetwork: true
#       volumes:
#       - hostPath:
#           path: /run/xtables.lock
#           type: FileOrCreate
#         name: iptableslock
#       containers:
#       - name: nmi
#         image: "mcr.microsoft.com/k8s/aad-pod-identity/nmi:1.5.4"
#         imagePullPolicy: Always
#         args:
#           - "--host-ip=$(HOST_IP)"
#           - "--node=$(NODE_NAME)"
#         env:
#           - name: HOST_IP
#             valueFrom:
#               fieldRef:
#                 fieldPath: status.podIP
#           - name: NODE_NAME
#             valueFrom:
#               fieldRef:
#                 fieldPath: spec.nodeName
#         resources:
#           limits:
#             cpu: 200m
#             memory: 512Mi
#           requests:
#             cpu: 100m
#             memory: 256Mi
#         securityContext:
#           privileged: true
#           capabilities:
#             add:
#             - NET_ADMIN
#         volumeMounts:
#         - mountPath: /run/xtables.lock
#           name: iptableslock
#         livenessProbe:
#           httpGet:
#             path: /healthz
#             port: 8080
#           initialDelaySeconds: 10
#           periodSeconds: 5
#       nodeSelector:
#         beta.kubernetes.io/os: linux
# ---
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: aad-pod-id-mic-service-account
#   namespace: default
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: aad-pod-id-mic-role
# rules:
# - apiGroups: ["apiextensions.k8s.io"]
#   resources: ["customresourcedefinitions"]
#   verbs: ["*"]
# - apiGroups: [""]
#   resources: ["pods", "nodes"]
#   verbs: [ "list", "watch" ]
# - apiGroups: [""]
#   resources: ["events"]
#   verbs: ["create", "patch"]
# - apiGroups: [""]
#   resources: ["endpoints"]
#   verbs: ["create", "get","update"]
# - apiGroups: ["aadpodidentity.k8s.io"]
#   resources: ["azureidentitybindings", "azureidentities"]
#   verbs: ["get", "list", "watch", "post"]
# - apiGroups: ["aadpodidentity.k8s.io"]
#   resources: ["azureassignedidentities"]
#   verbs: ["*"]
# ---
# apiVersion: rbac.authorization.k8s.io/v1beta1
# kind: ClusterRoleBinding
# metadata:
#   name: aad-pod-id-mic-binding
#   labels:
#     k8s-app: aad-pod-id-mic-binding
# subjects:
# - kind: ServiceAccount
#   name: aad-pod-id-mic-service-account
#   namespace: default
# roleRef:
#   kind: ClusterRole
#   name: aad-pod-id-mic-role
#   apiGroup: rbac.authorization.k8s.io
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   labels:
#     component: mic
#     k8s-app: aad-pod-id
#   name: mic
#   namespace: default
# spec:
#   replicas: 2
#   selector:
#     matchLabels:
#       component: mic
#       app: mic
#   template:
#     metadata:
#       labels:
#         component: mic
#         app: mic
#     spec:
#       serviceAccountName: aad-pod-id-mic-service-account
#       containers:
#       - name: mic
#         image: "mcr.microsoft.com/k8s/aad-pod-identity/mic:1.5.4"
#         imagePullPolicy: Always
#         args:
#           - "--cloudconfig=/etc/kubernetes/azure.json"
#           - "--logtostderr"
#         resources:
#           limits:
#             cpu: 200m
#             memory: 1024Mi
#           requests:
#             cpu: 100m
#             memory: 256Mi
#         volumeMounts:
#         - name: k8s-azure-file
#           mountPath: /etc/kubernetes/azure.json
#           readOnly: true
#         livenessProbe:
#           httpGet:
#             path: /healthz
#             port: 8080
#           initialDelaySeconds: 10
#           periodSeconds: 5
#       volumes:
#       - name: k8s-azure-file
#         hostPath:
#           path: /etc/kubernetes/azure.json
#       nodeSelector:
#         beta.kubernetes.io/os: linux